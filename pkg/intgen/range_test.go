package intgen

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestCreate(t *testing.T) {
	r1 := NewRange(0, 10)
	assert.Equal(t, 0, r1.Start())
	assert.Equal(t, 10, r1.Limit())
	assert.Equal(t, 10, r1.Size())

	r2 := NewRange(5, 10)
	assert.Equal(t, 5, r2.Start())
	assert.Equal(t, 10, r2.Limit())
	assert.Equal(t, 5, r2.Size())

	r3 := NewRange(5, 5)
	assert.Equal(t, 5, r3.Start())
	assert.Equal(t, 5, r3.Limit())
	assert.Equal(t, 0, r3.Size())

	r4 := NewRange(-1, 2)
	assert.Equal(t, -1, r4.Start())
	assert.Equal(t, 2, r4.Limit())
	assert.Equal(t, 3, r4.Size())

	assert.Panics(t, func() {
		NewRange(6, 5)
	})
}

func TestIntGeneration(t *testing.T) {
	r1 := NewRange(0, 5)
	assert.Equal(t, []int{0, 1, 2, 3, 4}, r1.Ints())

	r2 := NewRange(5, 5)
	assert.Equal(t, []int{}, r2.Ints())

	r3 := NewRange(-1, 2)
	assert.Equal(t, []int{-1, 0, 1}, r3.Ints())
}

func TestRangePartition1(t *testing.T) {
	// Test all cases with a small partition
	r1 := NewRange(0, 6)
	assert.Equal(t, []*Range{}, r1.Partition(0))

	assert.Equal(t, []*Range{
		NewRange(0, 6)},
		r1.Partition(1))

	assert.Equal(t, []*Range{
		NewRange(0, 3),
		NewRange(3, 6)},
		r1.Partition(2))

	assert.Equal(t, []*Range{
		NewRange(0, 2),
		NewRange(2, 4),
		NewRange(4, 6)},
		r1.Partition(3))

	assert.Equal(t, []*Range{
		NewRange(0, 2),
		NewRange(2, 4),
		NewRange(4, 5),
		NewRange(5, 6)},
		r1.Partition(4))

	assert.Equal(t, []*Range{
		NewRange(0, 2),
		NewRange(2, 3),
		NewRange(3, 4),
		NewRange(4, 5),
		NewRange(5, 6)},
		r1.Partition(5))

	assert.Equal(t, []*Range{
		NewRange(0, 1),
		NewRange(1, 2),
		NewRange(2, 3),
		NewRange(3, 4),
		NewRange(4, 5),
		NewRange(5, 6)},
		r1.Partition(6))

	assert.Equal(t, []*Range{
		NewRange(0, 1),
		NewRange(1, 2),
		NewRange(2, 3),
		NewRange(3, 4),
		NewRange(4, 5),
		NewRange(5, 6)},
		r1.Partition(7))
}

func TestRangePartition2(t *testing.T) {
	// Test cases for a large partition
	r1 := NewRange(0, 317)
	assert.Equal(t, []*Range{
		NewRange(0, 106),
		NewRange(106, 212),
		NewRange(212, 317)},
		r1.Partition(3))
}

func TestDuplicate(t *testing.T) {
	// Test cases for a large partition
	r1 := NewRange(0, 317)
	assert.Equal(t, []*Range{
		NewRange(0, 317),
		NewRange(0, 317),
		NewRange(0, 317)},
		r1.Duplicate(3))
}

// Test that the Rand() function generates values that are in range, and eventually generates
// all the values in that range
func TestRand(t *testing.T) {
	a := make([]bool, 5)
	r := NewRange(0, len(a))

	for i := 0; i < len(a)*10; i++ {
		// Will panic if Rand() generates any value out of the range
		a[r.Rand()] = true
	}

	// All ints in the range got generated by Rand()
	assert.Equal(t, []bool{true, true, true, true, true}, a)

	// Ideally we should check for even distribution, but we skip that here
}
