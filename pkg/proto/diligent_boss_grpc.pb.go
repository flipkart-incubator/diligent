// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: diligent_boss.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BossClient is the client API for Boss service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BossClient interface {
	// Ping
	Ping(ctx context.Context, in *BossPingRequest, opts ...grpc.CallOption) (*BossPingResponse, error)
	// Minions Management
	MinionRegister(ctx context.Context, in *MinionRegisterRequest, opts ...grpc.CallOption) (*MinionRegisterResponse, error)
	MinionUnregister(ctx context.Context, in *MinionUnregisterRequest, opts ...grpc.CallOption) (*MinionUnregisterResponse, error)
	MinionShow(ctx context.Context, in *MinionShowRequest, opts ...grpc.CallOption) (*MinionShowResponse, error)
}

type bossClient struct {
	cc grpc.ClientConnInterface
}

func NewBossClient(cc grpc.ClientConnInterface) BossClient {
	return &bossClient{cc}
}

func (c *bossClient) Ping(ctx context.Context, in *BossPingRequest, opts ...grpc.CallOption) (*BossPingResponse, error) {
	out := new(BossPingResponse)
	err := c.cc.Invoke(ctx, "/proto.Boss/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossClient) MinionRegister(ctx context.Context, in *MinionRegisterRequest, opts ...grpc.CallOption) (*MinionRegisterResponse, error) {
	out := new(MinionRegisterResponse)
	err := c.cc.Invoke(ctx, "/proto.Boss/MinionRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossClient) MinionUnregister(ctx context.Context, in *MinionUnregisterRequest, opts ...grpc.CallOption) (*MinionUnregisterResponse, error) {
	out := new(MinionUnregisterResponse)
	err := c.cc.Invoke(ctx, "/proto.Boss/MinionUnregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bossClient) MinionShow(ctx context.Context, in *MinionShowRequest, opts ...grpc.CallOption) (*MinionShowResponse, error) {
	out := new(MinionShowResponse)
	err := c.cc.Invoke(ctx, "/proto.Boss/MinionShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BossServer is the server API for Boss service.
// All implementations must embed UnimplementedBossServer
// for forward compatibility
type BossServer interface {
	// Ping
	Ping(context.Context, *BossPingRequest) (*BossPingResponse, error)
	// Minions Management
	MinionRegister(context.Context, *MinionRegisterRequest) (*MinionRegisterResponse, error)
	MinionUnregister(context.Context, *MinionUnregisterRequest) (*MinionUnregisterResponse, error)
	MinionShow(context.Context, *MinionShowRequest) (*MinionShowResponse, error)
	mustEmbedUnimplementedBossServer()
}

// UnimplementedBossServer must be embedded to have forward compatible implementations.
type UnimplementedBossServer struct {
}

func (UnimplementedBossServer) Ping(context.Context, *BossPingRequest) (*BossPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBossServer) MinionRegister(context.Context, *MinionRegisterRequest) (*MinionRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinionRegister not implemented")
}
func (UnimplementedBossServer) MinionUnregister(context.Context, *MinionUnregisterRequest) (*MinionUnregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinionUnregister not implemented")
}
func (UnimplementedBossServer) MinionShow(context.Context, *MinionShowRequest) (*MinionShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinionShow not implemented")
}
func (UnimplementedBossServer) mustEmbedUnimplementedBossServer() {}

// UnsafeBossServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BossServer will
// result in compilation errors.
type UnsafeBossServer interface {
	mustEmbedUnimplementedBossServer()
}

func RegisterBossServer(s grpc.ServiceRegistrar, srv BossServer) {
	s.RegisterService(&Boss_ServiceDesc, srv)
}

func _Boss_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BossPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Boss/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServer).Ping(ctx, req.(*BossPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boss_MinionRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinionRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServer).MinionRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Boss/MinionRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServer).MinionRegister(ctx, req.(*MinionRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boss_MinionUnregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinionUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServer).MinionUnregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Boss/MinionUnregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServer).MinionUnregister(ctx, req.(*MinionUnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Boss_MinionShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinionShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BossServer).MinionShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Boss/MinionShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BossServer).MinionShow(ctx, req.(*MinionShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Boss_ServiceDesc is the grpc.ServiceDesc for Boss service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Boss_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Boss",
	HandlerType: (*BossServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Boss_Ping_Handler,
		},
		{
			MethodName: "MinionRegister",
			Handler:    _Boss_MinionRegister_Handler,
		},
		{
			MethodName: "MinionUnregister",
			Handler:    _Boss_MinionUnregister_Handler,
		},
		{
			MethodName: "MinionShow",
			Handler:    _Boss_MinionShow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diligent_boss.proto",
}
