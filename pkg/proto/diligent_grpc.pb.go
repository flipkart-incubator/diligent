// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MinionClient is the client API for Minion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinionClient interface {
	// Ping
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Dataspec Related
	LoadDataSpec(ctx context.Context, in *LoadDataSpecRequest, opts ...grpc.CallOption) (*LoadDataSpecResponse, error)
	GetDataSpecInfo(ctx context.Context, in *GetDataSpecInfoRequest, opts ...grpc.CallOption) (*GetDataSpecInfoResponse, error)
	// DB Connection Related
	OpenDBConnection(ctx context.Context, in *OpenDBConnectionRequest, opts ...grpc.CallOption) (*OpenDBConnectionResponse, error)
	GetDBConnectionInfo(ctx context.Context, in *GetDBConnectionInfoRequest, opts ...grpc.CallOption) (*GetDBConnectionInfoResponse, error)
	CloseDBConnection(ctx context.Context, in *CloseDBConnectionRequest, opts ...grpc.CallOption) (*CloseDBConnectionResponse, error)
	// Workload Related
	RunWorkload(ctx context.Context, in *RunWorkloadRequest, opts ...grpc.CallOption) (*RunWorkloadResponse, error)
	GetWorkloadInfo(ctx context.Context, in *GetWorkloadInfoRequest, opts ...grpc.CallOption) (*GetWorkloadInfoResponse, error)
	StopWorkload(ctx context.Context, in *StopWorkloadRequest, opts ...grpc.CallOption) (*StopWorkloadResponse, error)
}

type minionClient struct {
	cc grpc.ClientConnInterface
}

func NewMinionClient(cc grpc.ClientConnInterface) MinionClient {
	return &minionClient{cc}
}

func (c *minionClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/proto.Minion/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) LoadDataSpec(ctx context.Context, in *LoadDataSpecRequest, opts ...grpc.CallOption) (*LoadDataSpecResponse, error) {
	out := new(LoadDataSpecResponse)
	err := c.cc.Invoke(ctx, "/proto.Minion/LoadDataSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) GetDataSpecInfo(ctx context.Context, in *GetDataSpecInfoRequest, opts ...grpc.CallOption) (*GetDataSpecInfoResponse, error) {
	out := new(GetDataSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.Minion/GetDataSpecInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) OpenDBConnection(ctx context.Context, in *OpenDBConnectionRequest, opts ...grpc.CallOption) (*OpenDBConnectionResponse, error) {
	out := new(OpenDBConnectionResponse)
	err := c.cc.Invoke(ctx, "/proto.Minion/OpenDBConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) GetDBConnectionInfo(ctx context.Context, in *GetDBConnectionInfoRequest, opts ...grpc.CallOption) (*GetDBConnectionInfoResponse, error) {
	out := new(GetDBConnectionInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.Minion/GetDBConnectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) CloseDBConnection(ctx context.Context, in *CloseDBConnectionRequest, opts ...grpc.CallOption) (*CloseDBConnectionResponse, error) {
	out := new(CloseDBConnectionResponse)
	err := c.cc.Invoke(ctx, "/proto.Minion/CloseDBConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) RunWorkload(ctx context.Context, in *RunWorkloadRequest, opts ...grpc.CallOption) (*RunWorkloadResponse, error) {
	out := new(RunWorkloadResponse)
	err := c.cc.Invoke(ctx, "/proto.Minion/RunWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) GetWorkloadInfo(ctx context.Context, in *GetWorkloadInfoRequest, opts ...grpc.CallOption) (*GetWorkloadInfoResponse, error) {
	out := new(GetWorkloadInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.Minion/GetWorkloadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionClient) StopWorkload(ctx context.Context, in *StopWorkloadRequest, opts ...grpc.CallOption) (*StopWorkloadResponse, error) {
	out := new(StopWorkloadResponse)
	err := c.cc.Invoke(ctx, "/proto.Minion/StopWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinionServer is the server API for Minion service.
// All implementations must embed UnimplementedMinionServer
// for forward compatibility
type MinionServer interface {
	// Ping
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Dataspec Related
	LoadDataSpec(context.Context, *LoadDataSpecRequest) (*LoadDataSpecResponse, error)
	GetDataSpecInfo(context.Context, *GetDataSpecInfoRequest) (*GetDataSpecInfoResponse, error)
	// DB Connection Related
	OpenDBConnection(context.Context, *OpenDBConnectionRequest) (*OpenDBConnectionResponse, error)
	GetDBConnectionInfo(context.Context, *GetDBConnectionInfoRequest) (*GetDBConnectionInfoResponse, error)
	CloseDBConnection(context.Context, *CloseDBConnectionRequest) (*CloseDBConnectionResponse, error)
	// Workload Related
	RunWorkload(context.Context, *RunWorkloadRequest) (*RunWorkloadResponse, error)
	GetWorkloadInfo(context.Context, *GetWorkloadInfoRequest) (*GetWorkloadInfoResponse, error)
	StopWorkload(context.Context, *StopWorkloadRequest) (*StopWorkloadResponse, error)
	mustEmbedUnimplementedMinionServer()
}

// UnimplementedMinionServer must be embedded to have forward compatible implementations.
type UnimplementedMinionServer struct {
}

func (UnimplementedMinionServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMinionServer) LoadDataSpec(context.Context, *LoadDataSpecRequest) (*LoadDataSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadDataSpec not implemented")
}
func (UnimplementedMinionServer) GetDataSpecInfo(context.Context, *GetDataSpecInfoRequest) (*GetDataSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSpecInfo not implemented")
}
func (UnimplementedMinionServer) OpenDBConnection(context.Context, *OpenDBConnectionRequest) (*OpenDBConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDBConnection not implemented")
}
func (UnimplementedMinionServer) GetDBConnectionInfo(context.Context, *GetDBConnectionInfoRequest) (*GetDBConnectionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBConnectionInfo not implemented")
}
func (UnimplementedMinionServer) CloseDBConnection(context.Context, *CloseDBConnectionRequest) (*CloseDBConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseDBConnection not implemented")
}
func (UnimplementedMinionServer) RunWorkload(context.Context, *RunWorkloadRequest) (*RunWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunWorkload not implemented")
}
func (UnimplementedMinionServer) GetWorkloadInfo(context.Context, *GetWorkloadInfoRequest) (*GetWorkloadInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadInfo not implemented")
}
func (UnimplementedMinionServer) StopWorkload(context.Context, *StopWorkloadRequest) (*StopWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWorkload not implemented")
}
func (UnimplementedMinionServer) mustEmbedUnimplementedMinionServer() {}

// UnsafeMinionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinionServer will
// result in compilation errors.
type UnsafeMinionServer interface {
	mustEmbedUnimplementedMinionServer()
}

func RegisterMinionServer(s grpc.ServiceRegistrar, srv MinionServer) {
	s.RegisterService(&Minion_ServiceDesc, srv)
}

func _Minion_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Minion/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_LoadDataSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadDataSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).LoadDataSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Minion/LoadDataSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).LoadDataSpec(ctx, req.(*LoadDataSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_GetDataSpecInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataSpecInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).GetDataSpecInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Minion/GetDataSpecInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).GetDataSpecInfo(ctx, req.(*GetDataSpecInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_OpenDBConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenDBConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).OpenDBConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Minion/OpenDBConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).OpenDBConnection(ctx, req.(*OpenDBConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_GetDBConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBConnectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).GetDBConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Minion/GetDBConnectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).GetDBConnectionInfo(ctx, req.(*GetDBConnectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_CloseDBConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseDBConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).CloseDBConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Minion/CloseDBConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).CloseDBConnection(ctx, req.(*CloseDBConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_RunWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).RunWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Minion/RunWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).RunWorkload(ctx, req.(*RunWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_GetWorkloadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).GetWorkloadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Minion/GetWorkloadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).GetWorkloadInfo(ctx, req.(*GetWorkloadInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Minion_StopWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServer).StopWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Minion/StopWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServer).StopWorkload(ctx, req.(*StopWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Minion_ServiceDesc is the grpc.ServiceDesc for Minion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Minion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Minion",
	HandlerType: (*MinionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Minion_Ping_Handler,
		},
		{
			MethodName: "LoadDataSpec",
			Handler:    _Minion_LoadDataSpec_Handler,
		},
		{
			MethodName: "GetDataSpecInfo",
			Handler:    _Minion_GetDataSpecInfo_Handler,
		},
		{
			MethodName: "OpenDBConnection",
			Handler:    _Minion_OpenDBConnection_Handler,
		},
		{
			MethodName: "GetDBConnectionInfo",
			Handler:    _Minion_GetDBConnectionInfo_Handler,
		},
		{
			MethodName: "CloseDBConnection",
			Handler:    _Minion_CloseDBConnection_Handler,
		},
		{
			MethodName: "RunWorkload",
			Handler:    _Minion_RunWorkload_Handler,
		},
		{
			MethodName: "GetWorkloadInfo",
			Handler:    _Minion_GetWorkloadInfo_Handler,
		},
		{
			MethodName: "StopWorkload",
			Handler:    _Minion_StopWorkload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diligent.proto",
}
